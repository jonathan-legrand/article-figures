knitr::opts_chunk$set(echo = TRUE)
exoX <- read.delim(file = "blockwise_patterns_schaefer200.csv", # dans quel fichier sont les donn?es
sep = ",", # quel est le s?parateur des colonnes (\t=tabulation)
stringsAsFactors = T) # Transforme les colonnes contenant des caract?res en VI (factor)
View(exoX)
df <- read.delim(file = "blockwise_patterns_schaefer200.csv", # dans quel fichier sont les donn?es
sep = ",", # quel est le s?parateur des colonnes (\t=tabulation)
stringsAsFactors = T) # Transforme les colonnes contenant des caract?res en VI (factor)
View(df)
df <- read.delim(file = "blockwise_patterns_schaefer200.csv",
row.names = 1,
sep = ",", # quel est le s?parateur des colonnes (\t=tabulation)
stringsAsFactors = T) # Transforme les colonnes contenant des caract?res en VI (factor)
df <- read.delim(file = "blockwise_patterns_schaefer200.csv",
row.names = 1,
sep = ",",
stringsAsFactors = T)
df <- read.delim(file = "blockwise_patterns_schaefer200.csv",
row.names = 1,
sep = ",")
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
row.names = 1,
stringsAsFactors = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
row.names = 1,
stringsAsFactors = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
stringsAsFactors = TRUE)
View(df)
df <- df[c(,1)]
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
View(df)
library(stats) # ce package contient des tests dont on a besoin (comme le shapiro ou le Tukey)
library("car") # ce package contient le test de Levene dont on a besoin pour tester l'homogénéité des variances
library(ez) #chargement du package ezANOVA
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within = block, between= cluster_label, type=3, return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within = block, between= cluster_label, type=1, return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within = .(block,cluster_label), type=3, return_aov=T) # on stocke le résultat dans un objet anova3
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within = .(block,cluster_label), type=3, return_aov=T) # on stocke le résultat dans un objet anova3
View(df)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within =block,
between=cluster_label,
type=3, return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold , within =block,
between=cluster_label,
type=3, return_aov=T) # on stocke le résultat dans un objet anova3
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
df$fold <- factor(df$fold)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
within =block,
between=cluster_label,
type=3, return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
within =block,
between=cluster_label,
type=3, return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
within = type,
between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
#affichage du tableau d'ANOVA:
```{r}
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(type,cluster_label),
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(type,cluster_label),
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(type,cluster_label),
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(block,cluster_label),
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(block,cluster_label),
type=1,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(block,cluster_label),
type=2,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=.(block,cluster_label),
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=block,
between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
# within=block,
between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=block,
between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=block,
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=cluster_label,
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=block,
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
cluster_label
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
within=cluster_label,
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
library(lme4)
model <- lmer(pattern_value ~ block + (1 | fold), data = df)
model <- lmer(pattern_value ~ block, data = df)
model <- lmer(pattern_value ~ block + (1 | cluster_label), data = df)
summary(model)
print(model, correlaiton=TRUE)
summary(model)
print(model, correlaiton=TRUE)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | fold), data = df)
model <- lmer(pattern_value ~ (block * cluster_label), data = df)
model <- lmer(pattern_value ~ (cluster_label) + (1 | fold), data = df)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | type), data = df)
summary(model)
model <- lmer(pattern_value ~ (block * type) + (1 | cluster_label), data = df)
summary(model)
model <- lmer(pattern_value ~ (block * type) + (1 | type), data = df)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | cluster_label), data = df)
summary(model)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | cluster_label), data = df)
library(emmeans)
emm_grid1_block*cluster<- emmeans(model, ~ block*cluster_label, infer="pairs")
emm_grid1_block_cluster<- emmeans(model, ~ block*cluster_label, infer="pairs")
View(emm_grid1_block_cluster)
#plot interactions
emmip(emm_grid1_block_cluster, pattern_value ~ block*cluster_label, CIs=TRUE)
View(emm_grid1_block_cluster)
#plot interactions
emmip(emm_grid1_block_cluster, ~ block*cluster_label, CIs=TRUE)
paircomp <- contrast(emm_grid1_block_cluster, "pairwise", adjust = "bonferroni" )
paircomp <- as.data.frame(paircomp)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
df$fold <- factor(df$fold)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(cluster_label,block),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
library(ez) #chargement du package ezANOVA
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(cluster_label,block),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
within = block,
between=.(cluster_label),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(cluster_label,block),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
paires<- pairwise.t.test(df$pattern_value,.(df$cluster_label, df$block),p.adjust.method = "holm", paired = T)
paires<- pairwise.t.test(df$pattern_value,c(df$cluster_label, df$block),p.adjust.method = "holm", paired = T)
paires<- pairwise.t.test(df$pattern_value,c(df$cluster_label*df$block),p.adjust.method = "holm", paired = T)
paires<- pairwise.t.test(df$pattern_value,df$cluster_label,p.adjust.method = "holm", paired = T)
paires
tukey <- TukeyHSD(anova3$aov)
tukey
tukey$`cluster_label:block`
tukey$`cluster_label:block`[c(1,)]
tukey$`cluster_label:block`[c(1,:)]
tukey <- TukeyHSD(anova3$aov)
tukey$`cluster_label:block`[c(1),]
View(tukey)
tukey$`cluster_label:block`
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
filtered_results <- tukey_table[grep("^(\\S+):\\S+-\\1:\\S+$", tukey_table$comparison), ]
# View the filtered results
print(filtered_results)
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
filtered_results <- tukey_table[grep("^(\\S+):\\S+-\\1:\\S+$", tukey_table$comparison, invert = TRUE), ]
# View the filtered results
print(filtered_results)
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
# Filter for comparisons where the first variable differs but the second is the same
filtered_results <- tukey_table[grep("^([^:]+):([^:]+)-\\1:\\2$", tukey_table$comparison), ]
# View the filtered results
print(filtered_results)
# View the filtered results
print(filtered_results)
but the second is the same
filtered_results <- tukey_table[grep("^([^:]+):([^:]+)-\\1:\\2$", tukey_table$comparison), ]
# View the filtered results
print(filtered_results)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
filtered_results <- tukey_table[grep("^([^:]+):([^:]+)-\\1:\\2$", tukey_table$comparison), ]
# View the filtered results
print(filtered_results)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
tukey_table$comparison
tukey <- TukeyHSD(anova3$aov)
tukey <- TukeyHSD(anova3$aov)
filtered_results <- tukey_table[grep("^([^:]+):([^_]+)_([^:]+)-([^:]+):\\2_\\3$", tukey_table$comparison), ]
# View the filtered results
print(filtered_results)
View(filtered_results)
# Add a new column that is TRUE if p-value < 0.05, FALSE otherwise
filtered_results$significant <- filtered_results$`p adj` < 0.05
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
# Filter for comparisons where the first variable differs, but the second part is the same
filtered_results <- tukey_table[grep("^([^:]+):([^_]+)_([^:]+)-([^:]+):\\2_\\3$", tukey_table$comparison), ]
# Add a new column that is TRUE if p-value < 0.05, FALSE otherwise
filtered_results$significant <- filtered_results$`p adj` < 0.05
# View the filtered results
print(filtered_results)
View(filtered_results)
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
# Filter for comparisons where the first variable differs, but the second part is the same
filtered_results <- tukey_table[grep("^([^:]+):([^_]+)_([^:]+)-([^:]+):\\2_\\3$", tukey_table$comparison), ]
# Add a new column that is TRUE if p-value < 0.05, FALSE otherwise
filtered_results$significant <- filtered_results$`p adj` < 0.05
# Drop the 'comparison' column
filtered_results <- filtered_results[ , !names(filtered_results) %in% "comparison"]
# View the filtered results
print(filtered_results)
tukey$cluster_label
library(lme4)
library(stats) # ce package contient des tests dont on a besoin (comme le shapiro ou le Tukey)
shap<-by(df$cluster_label, list(df$block, df$cluster_label), shapiro.test ) # on stocke le résultat du test pour pouvoir le rappeler au besoin plus tard
shap<-by(df$pattern_value, list(df$block, df$cluster_label), shapiro.test ) # on stocke le résultat du test pour pouvoir le rappeler au besoin plus tard
print(shap) # Afficher le contenu de shap dans la console
# print(shap) # Afficher le contenu de shap dans la console
```
shap<-by(df$pattern_value, list(df$block, df$cluster_label), shapiro.test ) # on stocke le résultat du test pour pouvoir le rappeler au besoin plus tard
# print(shap) # Afficher le contenu de shap dans la console
anova3$Levene
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200_thresholded.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
df$fold <- factor(df$fold)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
table(df$cluster_label)  #donne le nombre de mesures pour la VI (remplacez "exoX" et "VI"
#par ce qui vous int?resse dans votre cas )
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200_thresholded.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
df$fold <- factor(df$fold)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
table(df$cluster_label)  #donne le nombre de mesures pour la VI (remplacez "exoX" et "VI"
#par ce qui vous int?resse dans votre cas )
boxplot(VD~VI)
boxplot(df$pattern_value~df$cluster_label)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(file = "blockwise_patterns_schaefer200_thresholded.csv",
stringsAsFactors = TRUE)
df$cluster_label <- factor(df$cluster_label)
df$fold <- factor(df$fold)
# Drop the column named "X"
df <- df[, !colnames(df) %in% "X"]
table(df$cluster_label)  #donne le nombre de mesures pour la VI (remplacez "exoX" et "VI"
#par ce qui vous int?resse dans votre cas )
boxplot(df$pattern_value~df$cluster_label)
library(stats) # ce package contient des tests dont on a besoin (comme le shapiro ou le Tukey)
shap<-by(df$pattern_value, list(df$block, df$cluster_label), shapiro.test ) # on stocke le résultat du test pour pouvoir le rappeler au besoin plus tard
# print(shap) # Afficher le contenu de shap dans la console
library(ez) #chargement du package ezANOVA
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(cluster_label,block),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
tukey <- TukeyHSD(anova3$aov)
tukey$cluster_label
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
# Filter for comparisons where the first variable differs, but the second part is the same
filtered_results <- tukey_table[grep("^([^:]+):([^_]+)_([^:]+)-([^:]+):\\2_\\3$", tukey_table$comparison), ]
# Add a new column that is TRUE if p-value < 0.05, FALSE otherwise
filtered_results$significant <- filtered_results$`p adj` < 0.05
# Drop the 'comparison' column
filtered_results <- filtered_results[ , !names(filtered_results) %in% "comparison"]
# View the filtered results
print(filtered_results)
paires<- pairwise.t.test(df$pattern_value,df$cluster_label,p.adjust.method = "holm", paired = T)
paires
library(lme4)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | cluster_label), data = df)
library(emmeans)
emm_grid1_block_cluster<- emmeans(model, pattern_value ~ block*cluster_label, infer="pairs")
anova3<-ezANOVA(data=df ,dv=pattern_value, wid=fold ,
# within = type,
between=.(cluster_label,block),
# between=cluster_label,
type=3,
return_aov=T) # on stocke le résultat dans un objet anova3
summary(anova3$aov)
summary(anova3$aov)
tukey <- TukeyHSD(anova3$aov)
tukey$cluster_label
# Extract the TukeyHSD results for a specific term (e.g., 'term')
tukey_table <- as.data.frame(tukey$`cluster_label:block`)
# Keep rownames as a separate column for filtering
tukey_table$comparison <- rownames(tukey_table)
# Filter for interaction effects with the same first variable
# Filter for interaction effects where the first variable differs
# Filter for comparisons where the first variable differs, but the second part is the same
filtered_results <- tukey_table[grep("^([^:]+):([^_]+)_([^:]+)-([^:]+):\\2_\\3$", tukey_table$comparison), ]
# Add a new column that is TRUE if p-value < 0.05, FALSE otherwise
filtered_results$significant <- filtered_results$`p adj` < 0.05
# Drop the 'comparison' column
filtered_results <- filtered_results[ , !names(filtered_results) %in% "comparison"]
# View the filtered results
print(filtered_results)
paires<- pairwise.t.test(df$pattern_value,df$cluster_label,p.adjust.method = "holm", paired = T)
paires
library(lme4)
model <- lmer(pattern_value ~ (block * cluster_label) + (1 | cluster_label), data = df)
library(emmeans)
emm_grid1_block_cluster<- emmeans(model, pattern_value ~ block*cluster_label, infer="pairs")
View(filtered_results)
View(df)
knitr::opts_chunk$set(echo = TRUE)
write.csv(filtered_results, "tukeyhsd_blockwise.csv",
sep=",")
library(tidyverse)
# Extract the desired components using `mutate` and `separate`
final_results <- filtered_results %>%
mutate(
block_a = str_extract(column, "(?<=:)[^_]+"),       # First element after ':'
block_b = str_extract(column, "(?<=_)[^-]+"),       # Element after '_'
clusterlabel_a = str_extract(column, "^[^-:]+"),    # First element (before ':')
clusterlabel_b = str_extract(column, "(?<=-)[^:]+") # First element after '-'
)
filtered_results <- rownames_to_column(filtered_results, var="column")
# Extract the desired components using `mutate` and `separate`
final_results <- filtered_results %>%
mutate(
block_a = str_extract(column, "(?<=:)[^_]+"),       # First element after ':'
block_b = str_extract(column, "(?<=_)[^-]+"),       # Element after '_'
clusterlabel_a = str_extract(column, "^[^-:]+"),    # First element (before ':')
clusterlabel_b = str_extract(column, "(?<=-)[^:]+") # First element after '-'
)
print(final_results)
View(final_results)
write.csv(final_results, "tukeyhsd_blockwise.csv",
sep=",")
